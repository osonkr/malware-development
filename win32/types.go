package win32

import (
	"bytes"
	"reflect"
	"unsafe"
)

type (
	BOOLEAN = byte
	BOOL = int32
	BYTE = byte
	DWORD = uint32
	DWORD32 = uint32
	DWORD64 = uint64
	WORD = uint16
	HANDLE = uintptr
	LPVOID = uintptr
	SIZE_T = uintptr
	LPCVOID = uintptr
	PVOID = uintptr
	HMODULE = uintptr
	LPCSTR = uintptr
	LPDWORD = uintptr
	USHORT = uint16
	NULL_REF = int
)

const (
	// docs.microsoft.com/en-us/windows/desktop/ProcThread/process-security-and-access-rights
	PROCESS_CREATE_PROCESS = 0x0080
	PROCESS_CREATE_THREAD = 0x0002
	PROCESS_DUP_HANDLE = 0x0040
	PROCESS_QUERY_INFORMATION = 0x0400
	PROCESS_QUERY_LIMITED_INFORMATION = 0x1000
	PROCESS_SET_INFORMATION = 0x0200
	PROCESS_SET_QUOTA = 0x0100
	PROCESS_SUSPEND_RESUME = 0x0800
	PROCESS_TERMINATE = 0x0001
	PROCESS_VM_OPERATION = 0x0008
	PROCESS_VM_READ = 0x0010
	PROCESS_VM_WRITE = 0x0020
	PROCESS_ALL_ACCESS = 0x001F0FFF

	//https://docs.microsoft.com/en-us/windows/win32/memory/memory-protection-constants
	PAGE_EXECUTE = 0x10
	PAGE_EXECUTE_READ = 0x20
	PAGE_EXECUTE_READWRITE = 0x40
	PAGE_EXECUTE_WRITECOPY = 0x80
	PAGE_NOACCESS = 0x01
	PAGE_READONLY = 0x02
	PAGE_READWRITE = 0x04
	PAGE_WRITECOPY = 0x08
	PAGE_TAGETS_INVALID = 0x40000000
	PAGE_TARGETS_NO_UPDATE = 0x40000000

	// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex
	MEM_COMMIT = 0x00001000
	MEM_RESERVE = 0x00002000
	MEM_RESET = 0x00080000
	MEM_RESET_UNDO = 0x1000000

	// https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualfree
	MEM_DECOMMIT = 0x00004000
	MEM_RELEASE = 0x00008000

	)

type LPSECURITY_ATTRIBUTES struct {
	NLength DWORD
	LpSecurityDescriptor LPVOID
	BInheritHandle BOOL
}

type PEB struct {
	InheritedAddressSpace BYTE
	ReadImageFileExecOptions BYTE
	BeingDebugged BYTE
	BitField BYTE
	Reserved1 DWORD
	Mutant PVOID
	ImageBaseAddress PVOID
	Ldr *PEB_LDR_DATA
	ProcessParameters *RTL_USER_PROCESS_PARAMETERS
}

type PEB_LDR_DATA struct {
	Reserved1 DWORD
	Reserved2 PVOID
	InLoadOrderModuleList LIST_ENTRY
	InMemoryOrderModuleList LIST_ENTRY
}

type LIST_ENTRY struct {
	FLINK PVOID
	BLINK PVOID
}

type LDR_DATA_TABLE_ENTRY struct {
	InLoadOrderLinks LIST_ENTRY
	InMemoryOrderLinks LIST_ENTRY
	InInitializationOrderLinks LIST_ENTRY
	DllBase PVOID
	EntryPoint PVOID
	SizeOfImage DWORD
	FullDllName UNICODE_STRING
	BaseDllName UNICODE_STRING
}

type STRING struct {
	Length USHORT
	MaximumLength USHORT
	Buffer uintptr
}

type UNICODE_STRING struct {
	Length USHORT
	MaximumLength USHORT
	Buffer uintptr
}

func (uni UNICODE_STRING) ToString() string {
	buf := rawMemToSlice(uni.Buffer, int(uni.Length), int(uni.MaximumLength))
	buf = bytes.Replace(buf, []byte{0x00}, nil, -1)

	return string(buf)
}

func rawMemToSlice(ptr uintptr, length int, capacity int) []byte {
	if length <= 0 {
		return nil
	}

	sh := &reflect.SliceHeader{
		Data: ptr,
		Len:  length,
		Cap:  capacity,
	}

	bp := *(*[]byte)(unsafe.Pointer(sh))

	buf := make([]byte, length, capacity)

	copy(buf, bp)

	return buf
}

type RTL_USER_PROCESS_PARAMETERS struct {
	MaximumLength DWORD
	Length DWORD
	Flags DWORD
	DebugFlags DWORD
	ConsoleHandle PVOID
	ConsoleFlags DWORD
	StandardInput PVOID
	StandardOutput PVOID
	StandardError PVOID
	CurrentDirectory CURDIR
	DllPath UNICODE_STRING
	ImagePathName UNICODE_STRING
	CommandLine UNICODE_STRING
	Environment PVOID
	JNK [9]DWORD
	WindowTitle UNICODE_STRING
	DesktopInfo UNICODE_STRING
	ShellInfo UNICODE_STRING
	RuntimeData UNICODE_STRING
	CurrentDirectories [32]RTL_DRIVE_LETTER_CURDIR
	EnvironmentSize DWORD64
	EnvironmentVersion DWORD64
}

type RTL_DRIVE_LETTER_CURDIR struct {
	Flags WORD
	Length WORD
	TimeStamp DWORD
	DosPath STRING
}

type CURDIR struct {
	DosPath UNICODE_STRING
	Handle PVOID
}

type IMAGE_DOS_HEADER struct {
	JUNK [32]WORD
	Elfanew PVOID
}
